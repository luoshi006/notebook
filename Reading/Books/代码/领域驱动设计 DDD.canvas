{
	"nodes":[
		{"type":"group","id":"3a2e9560e2350455","x":840,"y":20,"width":3480,"height":2113,"color":"2","label":"限界上下文"},
		{"type":"group","id":"3430f977174b8e85","x":860,"y":788,"width":2160,"height":1325,"color":"#9985ff","label":"子域"},
		{"type":"group","id":"da57b7fa79ec42c3","x":880,"y":1320,"width":2120,"height":773,"color":"#bcc8f5","label":"如何分解子域"},
		{"type":"group","id":"93e8b30b956bb011","x":5999,"y":241,"width":901,"height":784,"label":"Clean Architecture"},
		{"type":"text","text":"## Refs\n- https://insights.thoughtworks.cn/ddd-aggregation-bounded-context/\n- https://mp.weixin.qq.com/s?__biz=MzAwNTQ4MTQ4NQ==&mid=2453586936&idx=1&sn=1ca568242431c8062e744cdcc1106e1a&chksm=8cd1969abba61f8c0061ade10dff086188fd68badfd646c55470cc91b3bc7f5b726363656bb9&scene=27\n- https://www.thoughtworks.com/zh-cn/insights/blog/architecture/strategy-and-tactical-design-of-ddd\n- https://www.thoughtworks.com/zh-cn/insights/blog/architecture/how-to-build-domain-model-ddd","id":"2e2636ce068c9619","x":-381,"y":-255,"width":981,"height":315},
		{"type":"text","text":"# 1. 如何划分界限\n任何可以将领域分解成高内聚低耦合的子域的方法都是可行的方法。","id":"28a77993f4255dec","x":882,"y":-488,"width":598,"height":128,"color":"1"},
		{"type":"text","text":"## 限界上下文\n> 然而在几乎所有这种规模的组织中，整个业务模型太大且过于复杂以至于难以管理，甚至很难把它作为一个整体来理解。**我们必须把系统分解为较小的组成部分，无论在概念还是在实现上。**\n>\n> 有时，企业系统会集成各种不同来源的子系统，或者包含诸多属于完全不同领域的应用程序。要把这些不同部分中隐含的模型统一起来是不可能的。**通过为每个模型显式地定义一个限界上下文，然后在必要的情况下定义它与其他上下文的关系，建模人员就可以避免模型变得混乱。**\n>\n> [领域驱动设计 第四部分] ([https://book.douban.com/subject/26819666/](https://book.douban.com/subject/26819666/))\n\n限界上下文告诉我们，同一个概念，不必总是对应于一个单一模型，也可以对应于多个模型。用限界上下文明确模型要解决的问题，可以保持每个模型的清晰。**限界上下文是领域模型的边界，也就是领域知识的边界。** 和上下文主题紧密相关的模型内聚在上下文内，而其他模型被会分到其他限界上下文中。**限界上下文内的领域知识是高内聚低耦合的。**","id":"219631e5b976c7df","x":860,"y":40,"width":740,"height":460},
		{"type":"file","file":"Reading/Books/代码/img/bounded-context.png","id":"946f5a87e498159c","x":1600,"y":420,"width":400,"height":248},
		{"type":"text","text":"###  识别核心域周边的子域\n核心域识别出来了，接下来就是识别核心域周边的子域。核心域往往不会独立存在，会有其他子域同核心域一起才能达成业务目标。这里需要回答的问题是：\n\n-   有哪些子域是用来**支撑核心域**的？\n\t- 这些子域是帮助核心域更好的工作。例如提供审批流程以配置核心域，提供各种辅助功能更好的为核心域提供内容。\n-   有哪些子域是**核心域衍生出来的**？\n\t- 核心域经常会产生一些数据，这些数据也有其价值。比如产生各种报表，活动奖励的发放记录。\n-   有哪些子域是用来支撑或衍生自这些新识别出的子域的？\n\t- 用来支撑核心域的子域、以及核心域衍生的子域，也有各自的支撑子域和衍生子域。\n---\n如果按照聚合分组划分限界上下文，很可能出现“活动上下文”，同时活动模型，即承担运营人员配置的职责，又承担用户参与规则校验的职责，这会导致职责过多，违背了单一职责。另外活动规则校验的模块需要支持高并发，需要使用和配置模块不同的技术架构。\n*如果这些相似的概念和不同的技术实现属于不同的上下文，就可以保持各自模型的完整，技术上也可以做到独立演进。*","id":"ef155b71b63c91e5","x":1684,"y":1340,"width":696,"height":623},
		{"type":"text","text":"### 子域的粒度\n\n我们希望每个子域可以解决某个特定的问题，让这个问题的解决方案都内聚在子域对应的限界上下文内，所以如果问题的再分解的边界并不清晰，建议先不分解。随意的拆分会导致成为“分布式单体”。","id":"7dc96fb495eb2d76","x":2480,"y":1340,"width":480,"height":203},
		{"type":"file","file":"Reading/Books/代码/img/活动运营系统.png","id":"1e54c46ae01e9f7c","x":2480,"y":1800,"width":400,"height":253},
		{"type":"text","text":"## 子域\n每个限界上下文专注于解决某个特定的子域的问题。**每个子域都对应一个明确的问题，提供独立的价值，所以每个子域都相对独立。** \n- 低耦合：\n\t- 子域及其对应的限界上下文中的模型会因为其要解决的问题变化而变化，不会因为其他子域的变化而变化；\n- 高内聚：\n\t- 当一个子域发生变化时，只需要修改其对应限界上下文中的模型，不需要变动其他子域的模型。\n\n当我们设计一个新系统或者设计遗留系统的目标架构时，我们往往会按照理想的方式进行设计。<mark style=\"background: #D2B3FFA6;\">而在理想情况下，子域和限界上下文是重合的，但在现实世界中它们常常是错位的。</mark>","id":"a46c6964a712190d","x":1450,"y":808,"width":700,"height":432},
		{"type":"text","text":"## 识别限界上下文\n> 一个限界上下文封装了一个相对独立子领域的领域模型和服务。\n>\n> 子域subdomain和限界上下文某种意义上是互相印证的\n>\n> [DDD战术篇：领域模型的应用](http://insights.thoughtworkers.org/ddd-domain-model/)\n\n这个时候我们通过事件风暴得到的领域模型就可以出场了。领域模型和子域都是从业务知识里分析得到的，将两者匹配起来可以再次验证我们对于业务的理解、子域的分解和领域模型是否合理。\n\n为每个子域创建一个解决其问题的限界上下文，然后**为每个领域模型找到其归属的限界上下文。** 每个领域事件都是为了解决某个问题，它和它相关的领域模型就应该放在这个问题子域对应的限界上下文里。\n\n> 比如“活动已上线“这个事件，由运营人员在配置时触发，会导致用户可以开始参与活动。那么这个事件及其对应的“活动”概念应该被分为两个模型，分别归属于活动配置子域对应的“活动配置上下文”和活动子域对应的“活动上下文”。\n\n为领域模型寻找归属完成后，我们会发现这么几个情况。\n- 同一个概念可能会出现在多个限界上下文中。发生这种情况很正常，说明这多个子域都需要这个概念，而且很可能不同子域的领域模型不完全相同。\n\t- 比如刚才说到“活动”既存在于“活动上下文”中，又在“活动配置上下文”中。这里我们就很好的识别出了“重复的概念”问题。\n- 也有一些概念重复在多个限界上下文中，这些概念和该上下文的主题并没有紧密的关系。这些模型可以单独出一个限界上下文，用以同时支撑多个限界上下文，以减轻限界上下文的负担。\n- 有时候某个模型找不到合适的限界上下文，说明很可能是遗漏了一个子域，那就需要回到“分解子域”步骤，重新审视产品愿景。","id":"2dbd4579d8db7ddf","x":3440,"y":860,"width":860,"height":760},
		{"type":"text","text":"## 聚合分组法\n> 对事件风暴产生的聚合进行分组，**通过业务的内聚性和关联度划分边界**，结合限界上下文的定义进行判断，并给出上下文名称。\n\n### 困难\n- “相关性”全凭经验\n- 聚合分组法很容易导向一种**按照聚合划分**的架构。服务围绕聚合建设，而非针对某个业务价值，也就无法提供**正确的业务价值**。\n\t- 围绕聚合建设的服务，看上去可以复用，但是会造成服务间的紧耦合，容易成为最糟糕的分布式单体架构\n- 在使用聚合分组法时，架构师已经有一个**隐藏在心里的模糊的划分方案**，在划分限界上下文时都是往该方案上靠。","id":"eaf39ac26e16fe9a","x":1840,"y":-444,"width":800,"height":400,"color":"#dcbcbc"},
		{"type":"file","file":"Reading/Books/代码/img/The Clean Architecture.png","id":"081c72542b57996f","x":6019,"y":261,"width":400,"height":294},
		{"type":"file","file":"Reading/Books/代码/img/the clean architecture cone.png","id":"67a132dc681fb65b","x":6480,"y":261,"width":400,"height":294},
		{"type":"file","file":"Reading/Books/代码/img/flow of execution.png","id":"3d14b7241fdfd581","x":6219,"y":660,"width":400,"height":345},
		{"type":"link","url":"https://www.thoughtworks.com/zh-cn/insights/blog/architecture/how-to-build-domain-model-ddd","id":"809e8e3010db2789","x":-640,"y":1740,"width":1120,"height":1100},
		{"type":"text","text":"### 识别核心域\n由于核心域是最明显、最容易识别出来的子域，所以我们先从核心域开始。\n\n每一个子域甚至每一个领域模型都是为了产品愿景而存在的。我们分解子域的第一步，就是从产品愿景中获取核心域。**产品愿景包含“相对抽象的产品价值”，以及“实现该价值的主要功能”。**其中，主要功能就是我们寻找核心域的依据。想象一下，如果要做MVP的话，我们会挑选最能够提供其核心价值的功能来开发，以验证产品价值。MVP往往就是核心域。\n\n以上述活动运营系统为例，其产品愿景是通过各种吸引用户的优惠活动，以帮助客户通过活动提升用户量和知名度。其核心域是给客户提供吸引用户的多样的灵活的活动，包括活动形式、活动规则和多种奖励。","id":"3ea4061fc2b27fd4","x":910,"y":1462,"width":640,"height":380},
		{"type":"file","file":"Reading/Books/代码/img/领域驱动设计的四重边界.png","id":"d5fad48c350862f4","x":-254,"y":1262,"width":364,"height":400},
		{"type":"text","text":"# Demo","id":"1354c1fa41cf571d","x":-640,"y":1680,"width":250,"height":60}
	],
	"edges":[
		{"id":"764b9dc7a7b6701d","fromNode":"3ea4061fc2b27fd4","fromSide":"right","toNode":"ef155b71b63c91e5","toSide":"left"},
		{"id":"a722d4251c46e09e","fromNode":"ef155b71b63c91e5","fromSide":"right","toNode":"7dc96fb495eb2d76","toSide":"bottom"},
		{"id":"dcc48731e62c603c","fromNode":"219631e5b976c7df","fromSide":"bottom","toNode":"3430f977174b8e85","toSide":"top"},
		{"id":"8dafbef5e23c666d","fromNode":"3430f977174b8e85","fromSide":"right","toNode":"2dbd4579d8db7ddf","toSide":"left"}
	]
}